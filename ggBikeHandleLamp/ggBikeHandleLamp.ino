/*
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
*/

#include "ggButton.h"
#include "ggSampler.h"

/*
#define OLED_RESET 4
Adafruit_SSD1306 mDisplay(OLED_RESET);
*/

#define GG_VOLTAGE_PIN A0

#define LED_WHITE_L_PIN 11 // 3
#define LED_WHITE_R_PIN 9 // 5
#define LED_RED_L_PIN 2
#define LED_RED_R_PIN 4

/*
static const unsigned char PROGMEM mBitmapModeOff [] = {
0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x04, 0x07, 0xE0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x07, 0xE0, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x07, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x87, 0xE1, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x07, 0xE0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0xE0, 0xFF, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x07, 0xE0, 0x7F, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x07, 0xE0, 0x3F, 0x80, 0x00,
0x00, 0x01, 0xFC, 0x07, 0xE0, 0x1F, 0x80, 0x00, 0x00, 0x01, 0xF8, 0x07, 0xE0, 0x1F, 0x80, 0x00,
0x00, 0x03, 0xF8, 0x07, 0xE0, 0x1F, 0xC0, 0x00, 0x00, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xC0, 0x00,
0x00, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xC0, 0x00, 0x00, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xC0, 0x00,
0x00, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xC0, 0x00, 0x00, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xC0, 0x00,
0x00, 0x03, 0xF0, 0x03, 0xC0, 0x0F, 0xC0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x1F, 0xC0, 0x00,
0x00, 0x01, 0xF8, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x1F, 0x80, 0x00,
0x00, 0x01, 0xFC, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x7F, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x01, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xC0, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x1F, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00
};
*/
/*
static const unsigned char PROGMEM mBitmapModeFlash [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8,
0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0,
0x00, 0xFF, 0x80, 0x07, 0xE0, 0x01, 0xFF, 0x00, 0x00, 0x3F, 0xC0, 0x1F, 0xF8, 0x03, 0xFC, 0x00,
0x00, 0x0F, 0xC0, 0x7F, 0xFE, 0x03, 0xF0, 0x00, 0x00, 0x03, 0x80, 0xFF, 0xFF, 0x01, 0xC0, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
0x3F, 0xFF, 0x83, 0xFF, 0xFF, 0xC1, 0xFF, 0xFC, 0x7F, 0xFF, 0xC3, 0xFF, 0xFF, 0xC3, 0xFF, 0xFE,
0x7F, 0xFF, 0xC3, 0xFF, 0xFF, 0xC3, 0xFF, 0xFE, 0x3F, 0xFF, 0x83, 0xFF, 0xFF, 0xC1, 0xFF, 0xFC,
0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x03, 0x83, 0xFF, 0xFF, 0xC1, 0xC0, 0x00, 0x00, 0x0F, 0xC3, 0xFF, 0xFF, 0xC3, 0xF0, 0x00,
0x00, 0x3F, 0xC3, 0xFF, 0xFF, 0xC3, 0xFC, 0x00, 0x00, 0xFF, 0x83, 0xFF, 0xFF, 0xC1, 0xFF, 0x00,
0x03, 0xFE, 0x03, 0xFF, 0xFF, 0xC0, 0x7F, 0xC0, 0x0F, 0xF8, 0x03, 0xFF, 0xFF, 0xC0, 0x1F, 0xF0,
0x1F, 0xE0, 0x03, 0xFF, 0xFF, 0xC0, 0x07, 0xF8, 0x1F, 0x80, 0x03, 0xFF, 0xFF, 0xC0, 0x01, 0xF8,
0x0E, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x70, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00
};
*/
/*
static const unsigned char PROGMEM mBitmapModeOn [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x7F, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE,
0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,
0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFE,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,
0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFE,
0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x7F, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x0F, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
*/
/*
int GetTextSizeX(float aValue, int aDecimals, int aTextSize)
{
  int vValue = (int)aValue;
  int vChars = 0;
  if      (vValue <= -1000) vChars = 5;
  else if (vValue <= -100) vChars = 4;
  else if (vValue <= -10) vChars = 3;
  else if (vValue <= -1) vChars = 2;
  else if (vValue < 10) vChars = 1;
  else if (vValue < 100) vChars = 2;
  else if (vValue < 1000) vChars = 3;
  else if (vValue < 10000) vChars = 4;
  else vChars = 5;
  if (aDecimals > 0) vChars += aDecimals + 1;
  return 6 * vChars * aTextSize;
}
*/
/*
void DrawBattery(Adafruit_SSD1306& aDisplay,
                 int aPosX, int aPosY,
                 int aSizeX, int aSizeY,
                 int aPercent,
                 float aVoltage,
                 boolean aLowBattery)
{ 
  const int vGap = 2;
  const int vCap = 3;
  aSizeX -= vCap;
  aDisplay.drawRoundRect(aPosX, aPosY, aSizeX, aSizeY, 4, WHITE);
  aDisplay.drawRoundRect(aPosX+1, aPosY+1, aSizeX-2, aSizeY-2, 3, WHITE);
  aDisplay.fillRect(aPosX+aSizeX, aPosY+aSizeY/4, vCap, aSizeY/2, WHITE);
  int vPercent = (aPercent < 0) ? (0) : (aPercent < 100 ? aPercent : 100);
  aDisplay.fillRect(aPosX+vGap, aPosY+vGap, vPercent*(aSizeX-2*vGap)/100, aSizeY-2*vGap, WHITE);
  int vTextSize = 2; //(aSizeY-2*vGap)/9;
  if (vTextSize > 0) {
    aDisplay.setTextSize(vTextSize);
    aDisplay.setTextColor(INVERSE);
    const int vDecimals = 1;
    if (aPercent > 50) aDisplay.setCursor(aPosX+2*vGap, aPosY+2*vGap);
    else aDisplay.setCursor(aPosX+aSizeX-2*vGap-GetTextSizeX(aVoltage,vDecimals,vTextSize)-5*vTextSize, aPosY+2*vGap);
    aDisplay.print(aVoltage,vDecimals);
    aDisplay.print("V");
  }
  if (aLowBattery) {
    const int vO = 8;
    const int vL = 7;
    aDisplay.drawFastHLine(aPosX+vO, aPosY+aSizeY/4, 2*vL, INVERSE);
    aDisplay.drawFastHLine(aPosX+vO, aPosY+aSizeY/4+1, 2*vL, INVERSE);
    aDisplay.drawLine(aPosX+vO+2*vL-1, aPosY+aSizeY/4+2, aPosX+vO+vL, aPosY+aSizeY*3/4-2, INVERSE);
    aDisplay.drawFastHLine(aPosX+vO+vL, aPosY+aSizeY*3/4-1, 2*vL, INVERSE);
    aDisplay.drawFastHLine(aPosX+vO+vL, aPosY+aSizeY*3/4, 2*vL, INVERSE);
  }
}
*/

float mVoltage = 0.0f;
boolean mLowBattery = false;


void SampleVoltage()
{
  const float vFilter = 0.95f;
  int vValue = analogRead(GG_VOLTAGE_PIN);
  mVoltage = vFilter*mVoltage + (1.0f-vFilter)*(0.0192f*vValue);
  mLowBattery = mVoltage < 3.0f*3.3f;
}

/*
void PrintVoltage()
{
  const float vVoltageMin = 3.0f * 3.0f;
  const float vVoltageMax = 3.0f * 4.2f;
  int vPercent = (int)(100.0f * (mVoltage - vVoltageMin) / (vVoltageMax - vVoltageMin));
  DrawBattery(mDisplay, 0, 64-22, 128, 22, vPercent, mVoltage, mLowBattery); 
}
*/

void RedL(boolean aOn)
{
  digitalWrite(LED_RED_L_PIN, aOn);
}


void WhiteL(boolean aOn)
{
  digitalWrite(LED_WHITE_L_PIN, aOn);
}


void RedR(boolean aOn)
{
  digitalWrite(LED_RED_R_PIN, aOn);
}


void WhiteR(boolean aOn)
{
  digitalWrite(LED_WHITE_R_PIN, aOn);
}


void Lamps(boolean aWhiteL,
           boolean aWhiteR,
           boolean aRedL,
           boolean aRedR)
{
  WhiteL(aWhiteL);
  WhiteR(aWhiteR);
  RedL(aRedL);
  RedR(aRedR);
}


ggButton mButton(8, true, true);

ggSampler mFlashSampler(8.0f*70.0f/60.0f); // Trittfrequenz
// ggSampler mDisplaySampler(5.0f);
ggSampler mVoltageSampler(20.0f);
ggSampler mVoltageIndicator(2.0f);

enum tMode {
  eModeOff,
  eModeFlash,
  eModeOn
};

tMode mMode = eModeOff;

int mStep = 0;

#define LED_CONTROL_RED_PIN 1
#define LED_CONTROL_GREEN_PIN 0


void ControlRG(boolean aRedOn, boolean aGreenOn)
{
  digitalWrite(LED_CONTROL_RED_PIN, !aRedOn);
  digitalWrite(LED_CONTROL_GREEN_PIN, !aGreenOn);
}


void setup()
{
  /*
  mDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  mDisplay.clearDisplay();
  */
  pinMode(LED_RED_R_PIN, OUTPUT);
  pinMode(LED_RED_L_PIN, OUTPUT);
  pinMode(LED_WHITE_R_PIN, OUTPUT);
  pinMode(LED_WHITE_L_PIN, OUTPUT);
  pinMode(LED_CONTROL_RED_PIN, OUTPUT);
  pinMode(LED_CONTROL_GREEN_PIN, OUTPUT);
  ControlRG(false, false);
  mButton.begin();
}


void loop()
{
  if (mButton.SwitchingOn()) {
    switch (mMode) {
      case eModeOff: mMode = eModeFlash; break;
      case eModeFlash: mMode = mLowBattery ? eModeOff : eModeOn; break;
      case eModeOn: mMode = eModeOff; break;
      default: break;
    }
    if (mMode == eModeOff) {
      Lamps(false, false, false, false);
    }
  }
  if (mFlashSampler.IsDue()) {
    if (mStep >= 7) mStep = 0;
    else mStep += 1;
    if (mMode == eModeFlash || mMode == eModeOn) {
      boolean vOn = mMode == eModeOn;
      switch (mStep) {
        case 0: Lamps(vOn || true,  vOn || false, false, false); break;
        case 1: Lamps(vOn || true,  vOn || true,  false, false); break;
        case 2: Lamps(vOn || false, vOn || true,  false, false); break;
        case 3: Lamps(vOn || false, vOn || true,  false, true ); break;
        case 4: Lamps(vOn || false, vOn || false, false, true ); break;
        case 5: Lamps(vOn || false, vOn || false, true,  true ); break;
        case 6: Lamps(vOn || false, vOn || false, true,  false); break;
        case 7: Lamps(vOn || true,  vOn || false, true,  false); break;
        default: break;
      }
    }
  }
  /*
  if (mDisplaySampler.IsDue()) {
    mDisplay.clearDisplay();
    switch (mMode) {
      case eModeOff: mDisplay.drawBitmap((128-64)/2, 0, mBitmapModeOff, 64, 36, WHITE); break;
      case eModeFlash: mDisplay.drawBitmap((128-64)/2, 0, mBitmapModeFlash, 64, 36, WHITE); break;
      case eModeOn: mDisplay.drawBitmap((128-64)/2, 0, mBitmapModeOn, 64, 36, WHITE); break;
      default: break;
    }
    PrintVoltage();
    mDisplay.display();
  }
  */
  if (mVoltageSampler.IsDue()) {
    SampleVoltage();
    if (mLowBattery && (mMode == eModeOn)) {
      mMode = eModeFlash;
    }
  }
  if (mVoltageIndicator.IsDue()) {
    static boolean vBlink = false;
    vBlink = !vBlink;
    if      (mVoltage >= 11.1f) ControlRG(false,  true);
    else if (mVoltage >= 10.5f) ControlRG(vBlink, true);
    else if (mVoltage >=  9.9f) ControlRG(true,   true);
    else if (mVoltage >=  9.4f) ControlRG(true,   vBlink);
    else if (mVoltage >=  9.0f) ControlRG(true,   false);
    else                        ControlRG(vBlink, false);
  }
}

